// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Split
import BackgroundTasks
import Compression
import CoreData
import Foundation
@_exported import Split
import Swift
import SystemConfiguration
import UIKit
@_hasMissingDesignatedInitializers @objc public class SyncConfig : ObjectiveC.NSObject {
  @objc(builder) public static func builder() -> Split.SyncConfig.Builder
  @_inheritsConvenienceInitializers @objc(SyncConfigBuilder) public class Builder : ObjectiveC.NSObject {
    @objc(build) public func build() -> Split.SyncConfig
    @discardableResult
    @objc(addSplitFilter:) public func addSplitFilter(_ filter: Split.SplitFilter) -> Split.SyncConfig.Builder
    @objc deinit
    @objc override dynamic public init()
  }
  @objc deinit
  @objc override dynamic public init()
}
extension Partition {
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
}
@objc @_hasMissingDesignatedInitializers public class DefaultSplitFactory : ObjectiveC.NSObject, Split.SplitFactory {
  @objc public static var sdkVersion: Swift.String {
    @objc get
  }
  @objc public var client: Split.SplitClient {
    @objc get
  }
  @objc public var manager: Split.SplitManager {
    @objc get
  }
  @objc public var version: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol SplitManager {
  @objc var splits: [Split.SplitView] { get }
  @objc var splitNames: [Swift.String] { get }
  @objc func split(featureName: Swift.String) -> Split.SplitView?
}
public func += <K, V>(left: inout [K : V], right: [K : V]) where K : Swift.Hashable
public typealias SplitImpressionListener = (Split.SplitImpression) -> Swift.Void
@objc @_inheritsConvenienceInitializers public class SplitClientConfig : ObjectiveC.NSObject {
  @objc public var sdkReadyTimeOut: Swift.Int
  @objc public var featuresRefreshRate: Swift.Int
  @objc public var impressionRefreshRate: Swift.Int
  @objc public var impressionsChunkSize: Swift.Int64
  @objc public var segmentsRefreshRate: Swift.Int
  @objc public var impressionsQueueSize: Swift.Int
  @objc public var connectionTimeout: Swift.Int
  @objc public var trafficType: Swift.String?
  @objc public var eventsFirstPushWindow: Swift.Int
  @objc public var eventsPushRate: Swift.Int
  @objc public var eventsQueueSize: Swift.Int64
  @objc public var eventsPerPush: Swift.Int
  @objc public var metricsPushRate: Swift.Int
  @objc public var apiKey: Swift.String {
    @objc get
    @objc set
  }
  @objc public var serviceEndpoints: Split.ServiceEndpoints
  @objc public var isDebugModeEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isVerboseModeEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var impressionListener: Split.SplitImpressionListener?
  @objc public var localhostDataFolder: Swift.String
  @objc public var splitFile: Swift.String
  @objc public var isLabelsEnabled: Swift.Bool
  @objc public var sync: Split.SyncConfig
  @objc public var streamingEnabled: Swift.Bool
  @objc public var impressionsMode: Swift.String {
    @objc get
    @objc set
  }
  @objc public var pushRetryBackoffBase: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var offlineRefreshRate: Swift.Int
  @objc public var synchronizeInBackground: Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class Partition : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias SplitImpression = Split.Impression
@_inheritsConvenienceInitializers @objc public class Impression : ObjectiveC.NSObject, Swift.Codable {
  @objc public var feature: Swift.String?
  @objc public var keyName: Swift.String?
  @objc public var treatment: Swift.String?
  public var time: Swift.Int64?
  @objc public var timestamp: Foundation.NSNumber? {
    @objc get
  }
  public var changeNumber: Swift.Int64?
  @objc public var changeNum: Foundation.NSNumber? {
    @objc get
  }
  @objc public var label: Swift.String?
  @objc public var bucketingKey: Swift.String?
  @objc public var attributes: [Swift.String : Any]?
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class SplitView : ObjectiveC.NSObject, Swift.Codable {
  @objc public var name: Swift.String?
  @objc public var trafficType: Swift.String?
  public var killed: Swift.Bool?
  @objc public var isKilled: Swift.Bool {
    @objc get
  }
  @objc public var treatments: [Swift.String]?
  public var changeNumber: Swift.Int64?
  @objc public var changeNum: Foundation.NSNumber? {
    @objc get
  }
  @objc public var configs: [Swift.String : Swift.String]?
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class Key : ObjectiveC.NSObject {
  @objc(initWithMatchingKey:bucketingKey:) public init(matchingKey: Swift.String, bucketingKey: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
infix operator |> : Functional
@objc @_inheritsConvenienceInitializers open class SplitEventTask : ObjectiveC.NSObject {
  @objc open func onPostExecute(client: Split.SplitClient)
  @objc open func onPostExecuteView(client: Split.SplitClient)
  @objc override dynamic public init()
  @objc deinit
}
public typealias SplitAction = () -> Swift.Void
@objc public protocol SplitClient {
  @objc func getTreatment(_ split: Swift.String, attributes: [Swift.String : Any]?) -> Swift.String
  @objc func getTreatment(_ split: Swift.String) -> Swift.String
  @objc(getTreatmentsForSplits:attributes:) func getTreatments(splits: [Swift.String], attributes: [Swift.String : Any]?) -> [Swift.String : Swift.String]
  @objc func getTreatmentWithConfig(_ split: Swift.String) -> Split.SplitResult
  @objc func getTreatmentWithConfig(_ split: Swift.String, attributes: [Swift.String : Any]?) -> Split.SplitResult
  @objc(getTreatmentsWithConfigForSplits:attributes:) func getTreatmentsWithConfig(splits: [Swift.String], attributes: [Swift.String : Any]?) -> [Swift.String : Split.SplitResult]
  @objc func on(event: Split.SplitEvent, execute action: @escaping Split.SplitAction)
  @objc func track(trafficType: Swift.String, eventType: Swift.String) -> Swift.Bool
  @objc func track(trafficType: Swift.String, eventType: Swift.String, value: Swift.Double) -> Swift.Bool
  @objc func track(eventType: Swift.String) -> Swift.Bool
  @objc func track(eventType: Swift.String, value: Swift.Double) -> Swift.Bool
  @objc func flush()
  @objc func destroy()
  @objc func destroy(completion: (() -> Swift.Void)?)
  @objc(trackWithTrafficType:eventType:properties:) func track(trafficType: Swift.String, eventType: Swift.String, properties: [Swift.String : Any]?) -> Swift.Bool
  @objc(trackWithTrafficType:eventType:value:properties:) func track(trafficType: Swift.String, eventType: Swift.String, value: Swift.Double, properties: [Swift.String : Any]?) -> Swift.Bool
  @objc(trackWithEventType:properties:) func track(eventType: Swift.String, properties: [Swift.String : Any]?) -> Swift.Bool
  @objc(trackWithEventType:value:properties:) func track(eventType: Swift.String, value: Swift.Double, properties: [Swift.String : Any]?) -> Swift.Bool
}
public enum ConditionType : Swift.Int, Swift.Codable {
  case whitelist
  case rollout
  public typealias RawValue = Swift.Int
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class SplitBgSynchronizer : ObjectiveC.NSObject {
  @objc public static let shared: Split.SplitBgSynchronizer
  @objc public func register(apiKey: Swift.String, userKey: Swift.String)
  @objc public func unregister(apiKey: Swift.String, userKey: Swift.String)
  @objc public func unregisterAll()
  @objc public func schedule(serviceEndpoints: Split.ServiceEndpoints? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LocalhostSplitFactory : ObjectiveC.NSObject, Split.SplitFactory {
  @objc public static var sdkVersion: Swift.String {
    @objc get
  }
  @objc public var client: Split.SplitClient {
    @objc get
  }
  @objc public var manager: Split.SplitManager {
    @objc get
  }
  @objc public var version: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol SplitBase {
}
@objc @_inheritsConvenienceInitializers public class DateTime : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
extension String {
  public func isEmpty() -> Swift.Bool
  public func hasUpperCaseChar() -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc public class SplitResult : ObjectiveC.NSObject {
  @objc public var treatment: Swift.String
  @objc public var config: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
extension Date {
  public func isBetweeen(date date1: Foundation.Date, andDate date2: Foundation.Date) -> Swift.Bool
  public static func dateFromInt(number: Swift.Int64) -> Foundation.Date
}
@_hasMissingDesignatedInitializers @objc public class DefaultSplitManager : ObjectiveC.NSObject, Split.SplitManager {
  @objc public var splits: [Split.SplitView] {
    @objc get
  }
  @objc public var splitNames: [Swift.String] {
    @objc get
  }
  @objc public func split(featureName: Swift.String) -> Split.SplitView?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DefaultSplitFactoryBuilder : ObjectiveC.NSObject, Split.SplitFactoryBuilder {
  @objc override dynamic public init()
  @objc public func setApiKey(_ apiKey: Swift.String) -> Split.SplitFactoryBuilder
  @objc public func setMatchingKey(_ matchingKey: Swift.String) -> Split.SplitFactoryBuilder
  @objc public func setBucketingKey(_ bucketingKey: Swift.String) -> Split.SplitFactoryBuilder
  @objc public func setKey(_ key: Split.Key) -> Split.SplitFactoryBuilder
  @objc public func setConfig(_ config: Split.SplitClientConfig) -> Split.SplitFactoryBuilder
  @objc public func build() -> Split.SplitFactory?
  @objc deinit
}
@objc public protocol SplitFactoryBuilder {
  @objc @discardableResult
  func setApiKey(_ apiKey: Swift.String) -> Split.SplitFactoryBuilder
  @objc @discardableResult
  func setMatchingKey(_ matchingKey: Swift.String) -> Split.SplitFactoryBuilder
  @objc @discardableResult
  func setBucketingKey(_ bucketingKey: Swift.String) -> Split.SplitFactoryBuilder
  @objc @discardableResult
  func setKey(_ key: Split.Key) -> Split.SplitFactoryBuilder
  @objc @discardableResult
  func setConfig(_ config: Split.SplitClientConfig) -> Split.SplitFactoryBuilder
  @objc func build() -> Split.SplitFactory?
}
@objc public enum SplitEvent : Swift.Int {
  case sdkReady
  case sdkReadyTimedOut
  case sdkReadyFromCache
  case sdkUpdated
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
precedencegroup Functional {
  associativity: left
  higherThan: DefaultPrecedence
}
infix operator <*> : Functional
infix operator <^> : Functional
infix operator >>- : Functional
infix operator >>=- : Functional
infix operator >>| : Functional
@_hasMissingDesignatedInitializers @objc public class SplitFilter : ObjectiveC.NSObject {
  @objc(byName:) public static func byName(_ values: [Swift.String]) -> Split.SplitFilter
  @objc(byPrefix:) public static func byPrefix(_ values: [Swift.String]) -> Split.SplitFilter
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ServiceEndpoints : ObjectiveC.NSObject {
  @objc public static func builder() -> Split.ServiceEndpoints.Builder
  @_inheritsConvenienceInitializers @objc(ServiceEndpointsBuilder) public class Builder : ObjectiveC.NSObject {
    @objc(setSdkEndpoint:) public func set(sdkEndpoint: Swift.String) -> Self
    @objc(setEventsEndpoint:) public func set(eventsEndpoint: Swift.String) -> Self
    @objc(setAuthServiceEndpoint:) public func set(authServiceEndpoint: Swift.String) -> Self
    @objc(setStreamingServiceEndpoint:) public func set(streamingServiceEndpoint: Swift.String) -> Self
    @objc public func build() -> Split.ServiceEndpoints
    @objc deinit
    @objc override dynamic public init()
  }
  @objc deinit
  @objc override dynamic public init()
}
extension SplitView {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc @_hasMissingDesignatedInitializers final public class LocalhostSplitClient : ObjectiveC.NSObject, Split.SplitClient {
  @objc final public func getTreatment(_ split: Swift.String, attributes: [Swift.String : Any]?) -> Swift.String
  @objc final public func getTreatment(_ split: Swift.String) -> Swift.String
  @objc final public func getTreatments(splits: [Swift.String], attributes: [Swift.String : Any]?) -> [Swift.String : Swift.String]
  @objc final public func getTreatmentWithConfig(_ split: Swift.String) -> Split.SplitResult
  @objc final public func getTreatmentWithConfig(_ split: Swift.String, attributes: [Swift.String : Any]?) -> Split.SplitResult
  @objc final public func getTreatmentsWithConfig(splits: [Swift.String], attributes: [Swift.String : Any]?) -> [Swift.String : Split.SplitResult]
  final public func on(_ event: Split.SplitEvent, _ task: Split.SplitEventTask)
  @objc final public func on(event: Split.SplitEvent, execute action: @escaping Split.SplitAction)
  @objc final public func track(trafficType: Swift.String, eventType: Swift.String) -> Swift.Bool
  @objc final public func track(trafficType: Swift.String, eventType: Swift.String, value: Swift.Double) -> Swift.Bool
  @objc final public func track(eventType: Swift.String) -> Swift.Bool
  @objc final public func track(eventType: Swift.String, value: Swift.Double) -> Swift.Bool
  @objc final public func track(trafficType: Swift.String, eventType: Swift.String, properties: [Swift.String : Any]?) -> Swift.Bool
  @objc final public func track(trafficType: Swift.String, eventType: Swift.String, value: Swift.Double, properties: [Swift.String : Any]?) -> Swift.Bool
  @objc final public func track(eventType: Swift.String, properties: [Swift.String : Any]?) -> Swift.Bool
  @objc final public func track(eventType: Swift.String, value: Swift.Double, properties: [Swift.String : Any]?) -> Swift.Bool
  @objc final public func flush()
  @objc final public func destroy()
  @objc final public func destroy(completion: (() -> Swift.Void)?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol SplitFactory {
  @objc var client: Split.SplitClient { get }
  @objc var manager: Split.SplitManager { get }
  @objc var version: Swift.String { get }
}
@objc @_hasMissingDesignatedInitializers final public class DefaultSplitClient : ObjectiveC.NSObject, Split.SplitClient {
  @objc deinit
  @objc override dynamic public init()
}
extension DefaultSplitClient {
  @objc final public func on(event: Split.SplitEvent, execute action: @escaping Split.SplitAction)
}
extension DefaultSplitClient {
  @objc final public func getTreatmentWithConfig(_ split: Swift.String) -> Split.SplitResult
  @objc final public func getTreatmentWithConfig(_ split: Swift.String, attributes: [Swift.String : Any]?) -> Split.SplitResult
  @objc final public func getTreatment(_ split: Swift.String) -> Swift.String
  @objc final public func getTreatment(_ split: Swift.String, attributes: [Swift.String : Any]?) -> Swift.String
  @objc final public func getTreatments(splits: [Swift.String], attributes: [Swift.String : Any]?) -> [Swift.String : Swift.String]
  @objc final public func getTreatmentsWithConfig(splits: [Swift.String], attributes: [Swift.String : Any]?) -> [Swift.String : Split.SplitResult]
}
extension DefaultSplitClient {
  @objc final public func track(trafficType: Swift.String, eventType: Swift.String) -> Swift.Bool
  @objc final public func track(trafficType: Swift.String, eventType: Swift.String, value: Swift.Double) -> Swift.Bool
  @objc final public func track(eventType: Swift.String) -> Swift.Bool
  @objc final public func track(eventType: Swift.String, value: Swift.Double) -> Swift.Bool
  @objc final public func track(trafficType: Swift.String, eventType: Swift.String, properties: [Swift.String : Any]?) -> Swift.Bool
  @objc final public func track(trafficType: Swift.String, eventType: Swift.String, value: Swift.Double, properties: [Swift.String : Any]?) -> Swift.Bool
  @objc final public func track(eventType: Swift.String, properties: [Swift.String : Any]?) -> Swift.Bool
  @objc final public func track(eventType: Swift.String, value: Swift.Double, properties: [Swift.String : Any]?) -> Swift.Bool
}
extension DefaultSplitClient {
  @objc final public func flush()
  @objc final public func destroy()
  @objc final public func destroy(completion: (() -> Swift.Void)?)
}
extension Split.ConditionType : Swift.Equatable {}
extension Split.ConditionType : Swift.Hashable {}
extension Split.ConditionType : Swift.RawRepresentable {}
extension Split.SplitEvent : Swift.Equatable {}
extension Split.SplitEvent : Swift.Hashable {}
extension Split.SplitEvent : Swift.RawRepresentable {}
