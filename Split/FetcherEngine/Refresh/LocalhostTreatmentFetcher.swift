//
//  LocalhostSplitFetcher.swift
//  Split
//
//  Created by Javier L. Avrudsky on 14/02/2019.
//  Copyright Â© 2019 Split. All rights reserved.
//

import Foundation

struct LocalhostSplitFetcherConfig {
    var refreshInterval: Int = 10
}

class LocalhostTreatmentFetcher: TreatmentFetcher {

    private let refreshInterval: Int
    internal let splits: SyncDictionarySingleWrapper<String, String>
    private var pollingManager: PollingManager?
    private var eventsManager: SplitEventsManager?
    private let fileName = "localhost"
    private let fileType = "splits"
    private let fullFileName: String
    private let fileParser: LocalhostSplitsParser
    private let fileStorage: FileStorageProtocol
    
    init(storageManager: FileStorageProtocol = FileStorage(), config: LocalhostSplitFetcherConfig = LocalhostSplitFetcherConfig(), eventsManager: SplitEventsManager? = nil) {
        self.fullFileName = "\(fileName).\(fileType)"
        self.fileParser = SpaceDelimitedLocalhostSplitsParser()
        self.fileStorage = storageManager
        self.refreshInterval = config.refreshInterval
        self.splits = SyncDictionarySingleWrapper()
        self.eventsManager = eventsManager
        if refreshInterval > 0 {
            initFile()
            self.pollingManager = createPollingManager()
            pollingManager?.start()
        }
    }
    
    func forceRefresh() {
        loadFile()
    }
    
    func fetch(splitName: String) -> String? {
        return splits.value(forKey: splitName)
    }
    
    func fetchAll() -> [String:String]? {
        return splits.all
    }
    
    private func createPollingManager() -> PollingManager {
        var config = PollingManagerConfig()
        config.firstPollWindow = 1
        config.rate = refreshInterval
        
        return PollingManager(
            dispatchGroup: nil,
            config: config,
            triggerAction: {[weak self] in
                if let strongSelf = self {
                    strongSelf.loadFile()
                }
            }
        )
    }
    
    private func loadFile() {
        if let content = fileStorage.read(fileName: fullFileName), !content.isEmpty {
            let loadedSplits = fileParser.parseContent(content)
            splits.setValues(loadedSplits)
        }
    }
    
    private func initFile() {
        var fileContent: String? = nil
        
        if let filepath = Bundle.main.path(forResource: fileName, ofType: fileType) {
            do {
                fileContent = try String(contentsOfFile: filepath, encoding: .utf8)
            } catch {
                Logger.e("File Read Error for file \(filepath)")
            }
        }
        if fileContent == nil {
            Logger.w("Localhost file or content not found. An empty file will be created")
        }
        fileStorage.write(fileName: fullFileName, content: fileContent ?? "# Autogenerated Localhost file")
        logFileInfo()
        eventsManager?.notifyInternalEvent(.mySegmentsAreReady)
        eventsManager?.notifyInternalEvent(.splitsAreReady)
    }
    
    private func logFileInfo() {
        let cachePath = NSSearchPathForDirectoriesInDomains(.cachesDirectory, .userDomainMask, true)[0]
        let cacheDirectory = URL(fileURLWithPath: cachePath)
        let path = cacheDirectory.appendingPathComponent(fullFileName)
        Logger.d("Localhost file path: \(path)")
    }
}
